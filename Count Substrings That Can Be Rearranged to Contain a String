Q3. Count Substrings That Can Be Rearranged to Contain a String -
You are given two strings word1 and word2. A string x is called valid if x can be rearranged to have word2 as a prefix. Return the total number of valid substrings of word1.

Example 1:
Input: word1 = "bcca", word2 = "abc"
Output: 1
Explanation: The only valid substring is "bcca" which can be rearranged to "abcc" having "abc" as a prefix.

Example 2:
Input: word1 = "abcabc", word2 = "abc"
Output: 10
Explanation: All the substrings except substrings of size 1 and size 2 are valid.

Example 3:
Input: word1 = "abcabc", word2 = "aaabc"
Output: 0

Constraints:

1 <= word1.length <= 105
1 <= word2.length <= 104
word1 and word2 consist only of lowercase English letters.

*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*
                                                                                            SOLUTION

//user defined functioon =
bool over(vector<string> curr, vector<string> req){
  for(int i =0 ; i<26 ; i++){
    if(req[i] > curr[i]) // our current window doesnt have all word1 words;
        return false;
    }
    return true;
}
//given function                                                                               
 long long validSubstringCount(string word1, string word2){

  vector<int> req(26);
  vector<int> curr(26);

//to store words that has to be made as prefix;  
for(char word: word2)  req[word-'a']++;

int right =0;//sliding window position
for(int i =0 ; i<word1.size(); i++){
      while(right<word1.size() && over(curr, req)== false){
      curr[word1[right]]++;
      right++;
      }
      // current window has all elements of prefix
      // shrink the window size 
      if(over(curr, req)== true)      //current window contains all elements of prefix
      ans+= word1.size()+1 - right+1;    //count all possible substrings with current window size.

      curr[word1[i]] --; // shrinking the window size ;
}
return ans;
